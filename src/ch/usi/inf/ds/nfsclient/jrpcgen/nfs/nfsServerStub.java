/*
 * Automatically generated by jrpcgen 1.1.1 on 11/26/15 8:57 AM
 * jrpcgen is part of the "Remote Tea" ONC/RPC package for Java
 * See http://remotetea.sourceforge.net for details
 */
package ch.usi.inf.ds.nfsclient.jrpcgen.nfs;
import org.acplt.oncrpc.*;
import java.io.IOException;

import java.net.InetAddress;

import org.acplt.oncrpc.server.*;

/**
 */
public abstract class nfsServerStub extends OncRpcServerStub implements OncRpcDispatchable {

    public nfsServerStub()
           throws OncRpcException, IOException {
        this(0);
    }

    public nfsServerStub(int port)
           throws OncRpcException, IOException {
        this(null, port);
    }

    public nfsServerStub(InetAddress bindAddr, int port)
           throws OncRpcException, IOException {
        info = new OncRpcServerTransportRegistrationInfo [] {
            new OncRpcServerTransportRegistrationInfo(nfs.NFS_PROGRAM, 2),
        };
        transports = new OncRpcServerTransport [] {
            new OncRpcUdpServerTransport(this, bindAddr, port, info, 32768)
            ,
            new OncRpcTcpServerTransport(this, bindAddr, port, info, 32768)
        };
    }

    public void dispatchOncRpcCall(OncRpcCallInformation call, int program, int version, int procedure)
           throws OncRpcException, IOException {
        if ( version == 2 ) {
            switch ( procedure ) {
            case 0: {
                call.retrieveCall(XdrVoid.XDR_VOID);
                NFSPROC_NULL_2();
                call.reply(XdrVoid.XDR_VOID);
                break;
            }
            case 1: {
                fhandle args$ = new fhandle();
                call.retrieveCall(args$);
                attrstat result$ = NFSPROC_GETATTR_2(args$);
                call.reply(result$);
                break;
            }
            case 2: {
                sattrargs args$ = new sattrargs();
                call.retrieveCall(args$);
                attrstat result$ = NFSPROC_SETATTR_2(args$);
                call.reply(result$);
                break;
            }
            case 3: {
                call.retrieveCall(XdrVoid.XDR_VOID);
                NFSPROC_ROOT_2();
                call.reply(XdrVoid.XDR_VOID);
                break;
            }
            case 4: {
                diropargs args$ = new diropargs();
                call.retrieveCall(args$);
                diropres result$ = NFSPROC_LOOKUP_2(args$);
                call.reply(result$);
                break;
            }
            case 5: {
                fhandle args$ = new fhandle();
                call.retrieveCall(args$);
                readlinkres result$ = NFSPROC_READLINK_2(args$);
                call.reply(result$);
                break;
            }
            case 6: {
                readargs args$ = new readargs();
                call.retrieveCall(args$);
                readres result$ = NFSPROC_READ_2(args$);
                call.reply(result$);
                break;
            }
            case 7: {
                call.retrieveCall(XdrVoid.XDR_VOID);
                NFSPROC_WRITECACHE_2();
                call.reply(XdrVoid.XDR_VOID);
                break;
            }
            case 8: {
                writeargs args$ = new writeargs();
                call.retrieveCall(args$);
                attrstat result$ = NFSPROC_WRITE_2(args$);
                call.reply(result$);
                break;
            }
            case 9: {
                createargs args$ = new createargs();
                call.retrieveCall(args$);
                diropres result$ = NFSPROC_CREATE_2(args$);
                call.reply(result$);
                break;
            }
            case 10: {
                diropargs args$ = new diropargs();
                call.retrieveCall(args$);
                XdrInt result$ = new XdrInt(NFSPROC_REMOVE_2(args$));
                call.reply(result$);
                break;
            }
            case 11: {
                renameargs args$ = new renameargs();
                call.retrieveCall(args$);
                XdrInt result$ = new XdrInt(NFSPROC_RENAME_2(args$));
                call.reply(result$);
                break;
            }
            case 12: {
                linkargs args$ = new linkargs();
                call.retrieveCall(args$);
                XdrInt result$ = new XdrInt(NFSPROC_LINK_2(args$));
                call.reply(result$);
                break;
            }
            case 13: {
                symlinkargs args$ = new symlinkargs();
                call.retrieveCall(args$);
                XdrInt result$ = new XdrInt(NFSPROC_SYMLINK_2(args$));
                call.reply(result$);
                break;
            }
            case 14: {
                createargs args$ = new createargs();
                call.retrieveCall(args$);
                diropres result$ = NFSPROC_MKDIR_2(args$);
                call.reply(result$);
                break;
            }
            case 15: {
                diropargs args$ = new diropargs();
                call.retrieveCall(args$);
                XdrInt result$ = new XdrInt(NFSPROC_RMDIR_2(args$));
                call.reply(result$);
                break;
            }
            case 16: {
                readdirargs args$ = new readdirargs();
                call.retrieveCall(args$);
                readdirres result$ = NFSPROC_READDIR_2(args$);
                call.reply(result$);
                break;
            }
            case 17: {
                fhandle args$ = new fhandle();
                call.retrieveCall(args$);
                statfsres result$ = NFSPROC_STATFS_2(args$);
                call.reply(result$);
                break;
            }
            default:
                call.failProcedureUnavailable();
            }
        } else {
            call.failProgramUnavailable();
        }
    }

    public abstract void NFSPROC_NULL_2();

    public abstract attrstat NFSPROC_GETATTR_2(fhandle arg1);

    public abstract attrstat NFSPROC_SETATTR_2(sattrargs arg1);

    public abstract void NFSPROC_ROOT_2();

    public abstract diropres NFSPROC_LOOKUP_2(diropargs arg1);

    public abstract readlinkres NFSPROC_READLINK_2(fhandle arg1);

    public abstract readres NFSPROC_READ_2(readargs arg1);

    public abstract void NFSPROC_WRITECACHE_2();

    public abstract attrstat NFSPROC_WRITE_2(writeargs arg1);

    public abstract diropres NFSPROC_CREATE_2(createargs arg1);

    public abstract int NFSPROC_REMOVE_2(diropargs arg1);

    public abstract int NFSPROC_RENAME_2(renameargs arg1);

    public abstract int NFSPROC_LINK_2(linkargs arg1);

    public abstract int NFSPROC_SYMLINK_2(symlinkargs arg1);

    public abstract diropres NFSPROC_MKDIR_2(createargs arg1);

    public abstract int NFSPROC_RMDIR_2(diropargs arg1);

    public abstract readdirres NFSPROC_READDIR_2(readdirargs arg1);

    public abstract statfsres NFSPROC_STATFS_2(fhandle arg1);

}
// End of nfsServerStub.java
